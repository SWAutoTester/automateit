/**
 * This file is part of Automate It!'s free and open source web and mobile 
 * application testing framework.
 * 
 * Automate It! is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Automate It! is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Automate It!.  If not, see <http://www.gnu.org/licenses/>.
 **/
package org.automateit.event;

import java.util.Properties; 

import org.testng.ITestResult;

import org.apache.log4j.Logger;

import org.automateit.util.CommonProperties;

/**
 * This is the base class for alert handler sending message or event threads
 * 
 * @author mburnside
 */
public class SendMessageThreadBase extends Thread {
    
    /**
     * The name of the platform name configuration setting
     */    
    public final static String PLATFORM_NAME = "platformName";
    
    /**
     * The name of the version configuration setting
     */
    public final static String VERSION = "version";
    
    /**
     * The properties object
     */
    protected Properties props = null;
    
    /**
     * A message to be relayed to the destination
     */
    protected String message = null;
    
    /**
     * The test results object with test result metadata
     */
    protected ITestResult result = null;
    
    /**
     *  logging object
     */
    protected static Logger logger = Logger.getLogger(SendMessageThreadBase.class);
    
    /**
     * Copy Constructor
     * 
     * @param props The Properties object with email metadata
     * @param result The TestNG results object metadata
     */
    public SendMessageThreadBase(Properties props, ITestResult result) { 
        
        this.props = props; 
        this.result = result;
    
    }
    
    /**
     * Copy Constructor
     * 
     * @param props The Properties object with email metadata
     * @param message A message to be relayed to the destination
     */
    public SendMessageThreadBase(Properties props, String message) { 
        
        this.props = props; 
        this.message = message;
    
    }
    
    /**
     * Copy Constructor
     * 
     * @param props The Properties object with email metadata
     */
    public SendMessageThreadBase(Properties props) { 
        
        this.props = props; 
    
    }
    
    /**
     * Get the platform name.
     * 
     * @return 
     */
    protected String getPlatform() { return props.getProperty(PLATFORM_NAME); }
    
    /**
     * Get the fully qualified key name (generated by <code>platformName</code> property and test name)
     * 
     * @return 
     */
    protected String getCompoundKeyName() { 
        
        logger.info("Building key name: " + getPlatform() + "|" + result.getName());
        
        if(getPlatform() != null) return getPlatform() + "_" + result.getName();
        else return CommonProperties.getInstance().getBrowserName() + "_" + result.getName();
        
    }
    
    /**
     * Get the fully qualified key name (generated by <code>platformName</code> property and test name)
     * 
     * @return 
     */
    protected String getDeviceInfo() { 
        
        logger.info("Getting device/browser information: Platform Name|" + getPlatform() + " - Version|" + CommonProperties.getInstance().get(VERSION) + " - Browser Name|" + CommonProperties.getInstance().getBrowserName());
        
        if(getPlatform() != null) return getPlatform() + "." + CommonProperties.getInstance().get(VERSION);
        else return CommonProperties.getInstance().getBrowserName();
        
    }
    
}

